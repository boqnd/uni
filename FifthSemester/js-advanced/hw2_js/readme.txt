Задача 1.
Да се направи следната йерархия от Person, Student и Employee
 
-Класът Person съзадаващ хора да дефинира следните полета: 
name - име
age - години
gender - поле, показващо пола
Метод showPersonInfo(), който показва информация за човека (изписва на  
конзолата стойността на всичките му полета по подходящ начин)
- Класът Student наследяващ Person, представящ ученик със следните  
полета:
grade - показва оценката на ученика 
Да приема следните параметри: 
Student(name, age, gender, grade)
Метод showStudentInfo() който показва информация за човека и  
информация за оценката му (чрез надписи на екрана)
Класът Employee да наследява Person и да дефинира следните полета: 
daySalary показва дневната заплата на работника
 

Методи:
В случай че на работник се наложи да работи извън работно време, на 
него му се дължи допълнителна сума пари (overtime) за часовете които е  
работил. Сумата се пресмята по следния начин: ако работника, няма  
навършени 18 години, дължимата сума е 0. В противен случай, за всеки  
отработен час, на работника се заплаща сумата която получава на час (зависи  
от дневната заплата) умножена по 1,5.
метод calculateOvertime(hours) който пресмята и връща стойността на сумата  
която му се дължи при работа извън работно време
метод showEmployeeInfo(), който показва информация за човека, както и  
информация за дневната му заплата
Да се напише и демо:
1. Да се създаде масив от 10 елемента от тип Person.
2. Да се създадат по два обекта от тип Person, Student и Employee и да се вкарат 
в масива от хора.
3. Да се обходи масива и в зависимост от това дали обекта е от тип Person,  
Student или Employee да се извика съответно метода showPersonInfo,  
showStudentInfo или showEmployeeInfo.
4. Да се обходи още веднъж масива с хора и за всеки човек, който е работник,  
да се изведе на екрана сумата, която му се дължи при 2 часа работа извън  
работно време.

Примерни обекти:
const ivan = new Person('Ivan', 24, "male");
const drago = new Employee("Drago", 23, 'male', 50);
const pencho = new Student("Pencho", 23, 'male', 253);
const gosho = new Person('Gosho', 24, 'male');
const dimitur = new Employee("Mitko", 17, 'male', 50);
const penko = new Student("Penko", 23, 'male', 253);

Изход от 3 и 4 точка:
name: Ivan
age: 24
gender: male
name: Drago
age: 23
gender: male
daySalary: 50
Overtime bonus: 18.75
name: Pencho
age: 23
gender: male
grade: 253
name: Penko
age: 23
gender: male
grade: 253
name: Gosho
age: 24
gender: male
name: Mitko
age: 17
gender: male
daySalary: 50
Overtime bonus: 0

Задача 2.
Да се направи клас котка.
Една котка трябва да има (име, порода, години)
Да се напише функция която приема масив(Cat[]) от котки и критерии(string).
Резултата на функцията трябва да връща масива от котки сортиран по критерия(property на класа Cat).
- Aко има за критерии име, да ги сортира азбучно(лексикографски).
- Ако има за критерии порода, да ги сортира по дължината на името на породата.
- Ако има за критерии години, да ги сортира по години.
- Ако има all, да събира в число дължината на името + дължината на породата + годините и да сортира по това число.

Пример:
INPUT: ([{"name": "Tina", "breed" : "Maine Coon", "age" : 2}, {"name": "Annie", "breed" : "Maine Coon", "age" : 7}, {"name": "Polly", "breed" : "Brittish shorthair", "age" : 3}], "age")
Output: [{"name": "Tina", "breed" : "Maine Coon", "age" : 2}, {"name": "Polly", "breed" : "Brittish shorthair", "age" : 3}, {"name": "Annie", "breed" : "Maine Coon", "age" : 7}]

Задача 3.
Да се напише функция която получава масив от стрингове и връща масив от всички стрингове които са палиндроми.

Input: ["abccba", "lalala", "something", "123321", "debel lebed"]
Output: ["abccba", "123321", "debel lebed"]