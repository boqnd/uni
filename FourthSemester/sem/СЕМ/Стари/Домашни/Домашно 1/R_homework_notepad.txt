# • Прочетете данните и ги запишете в data frame в R;
input = read.csv("C:/Users/Toni/Downloads/pokemon.csv", header=TRUE)

# • Генерирайте си подизвадка от 600 наблюдения. За целта нека f_nr е
# вашият факултетен номер. Задайте състояние на генератора на слу-
# чайни числа в R чрез set.seed(f_nr). С помощта на подходяща фун-
# кция генерирайте извадка без връщане на числата от 1 до 705 като
# не забравяте да я запишете във вектор. Използвайте вектора, за да
# зашишете само редовете със съответните индекси в нов дейтафрейм и
# работете с него оттук нататък;

set.seed(61797)
randomIndexes = c(sample({1:705}, 600, replace = FALSE))
pokemonData = input[randomIndexes, ]

# • Изкарайте на екрана първите няколко (5-6) наблюдения;
head(pokemonData)

# • Какъв вид данни (качествени/количествени, непрекъснати/дискретни)
# са записани във всяка от променливите?

# Name - качествени
# Type1 - качествени
# Type2 - качествени
# Attack - количествени (непрекъснати)
# Defence - количествени (непрекъснати)
# Height - количествени (непрекъснати)
# Weight - количествени (непрекъснати)

# • Изведете дескриптивни статистики за всяка една от променливите;
summary(pokemonData)

# • Изведете редовете на най-високия и на най-лекия покемон;

attach(pokemonData)
print(pokemonData[Height == max(Height),])
print(pokemonData[Weight == min(Weight),])

# • Изведете редовете на покемоните с общ брой точки за атака и защита
# над 220;

print(pokemonData[Attack + Defense > 220,])

# • Колко на брой покемони имат първичен или вторичен тип "Dragon"или
# "Flying"и са високи над един метър?

nrow(pokemonData[(Type1 == "Dragon" | Type2 == "Dragon" | Type1 == "Flying" | Type2 == "Flying") & Height > 1,])

# • Направете хистограма на теглото само на покемоните с вторичен тип
# и нанесете графика на плътността върху нея. Симетрично ли са раз-
# положени данните?

hist(pokemonData[Type2 != "", c("Weight")], probability = TRUE)
lines(density(pokemonData[Type2 != "", c("Weight")]))
# данните не са разположени симетрично

# • За покемоните с първичен тип "Normal"или "Fighting"изследвайте
# съвместно променливите Type1 и Height с подходящ графичен метод.
# Забелязвате ли outlier-и? Сравнете извадковите средни и медианите в
# двете групи и направете извод;

boxplot(pokemonData[Type1 == "Normal",c("Weight")], pokemonData[Type1 == "Fighting",c("Weight")])
# при покемоните с първичен тип Normal има 7 outliner-и, докато при тези с тип Fighting- само 2,
# всички от които над съответните медиани.
# Покемоните с тип Fighting средно тежат повече, от тези с тип NOrmal

# • Изследвайте съвместно променливите Height и Weight с подходящ
# графичен метод. Бихте ли казали, че съществува линейна връзка меж-
# ду тях? Намерете корелацията между величините и коментирайте
# стойността `и. Начертайте регресионна права (линейната функция, ко-
# ято най-добре приближава функционалната зависимост). Ако е наб-
# людаван нов вид покемон с височина 2.1 метра, какво се очаква да е
# теглото му на базата на линейния модел?

plot(Height, Weight)
cor(Height, Weight)
abline(lm(Weight ~ Height))
# съществува средно силна линейна връзка между височината и теглото на покемоните

nums = lm(Weight ~ Height)$coefficients
print( nums[2]*2.1 + nums[1])
# Height 
# 115.349 







