hist(x)
f = function(n=100,p=.5){   # default parameter values
S = rbinom(1,n,p)
(S- n*p)/sqrt(n*p*(1-p))    # last value computed is returned.
}
simple.sim(1000,f,100,.5)
find.IQR = function(x) {
five.num = fivenum(x)       # for Tukey's summary
five.num[4] - five.num[2]
}
find.IQR
x = rnorm(100) # some sample data
find.IQR(x)
f = function(n=100, mu=0, sigma=1) {
nos = rnorm(n,mu,sigma)
(mean(nos)-mu)/(sigma/sqrt(n))
}
simulations = simple.sim(100,f,100,5,5)
hist(simulations,breaks=10,prob=TRUE)
f = function(n=100, mu=10) (mean(rexp(n,1/mu))-mu)/(mu/sqrt(n))
n=1 # 1 15, 50, 100
xvals = seq(-3, 3, .01)           # for the density plot
hist(simple.sim(1000,f,n,10), probability=TRUE, main=cat("n=", n), col=gray(.95), xlim = c(-3,3))
points(xvals, dnorm(xvals,0,1), type="l")         # plot normal curve
qqnorm(simple.sim(100,f,n,10), xlim = c(-3, 3), ylim = c(-3, 3))
qqline(simple.sim(100,f,n,10))
library("UsingR")
par(mfrow = c(1,2))
hist(homedata$y1970)    # looks more like normal
hist(homedata$y2000)    # looks more fat-tailed and skewed
par(mfrow = c(1,1))
# EDA - exploratory data analysis
simple.eda(homedata$y1970)  # draws histogram, boxplot and qqplot
simple.eda(homedata$y2000)  # not normal, fat-tailed
simple.eda(homedata$y1970)  # draws histogram, boxplot and qqplot
simple.eda(exec.pay)        # many outliers, not normal
plot(exec.pay)              # it helps to plot the data
log.exec.pay = log(exec.pay[exec.pay >0])/log(10) # 0 is a problem
simple.eda(log.exec.pay)        # looks more normal, still fat-tailed
names(ewr); ?ewr
airnames = names(ewr)           # store them for later
ewr.actual = ewr[, 3:10]        # get the important columns
boxplot(ewr.actual)
par(mfrow=c(2,4))               # 2 rows 4 columns
for(i in 3:10) boxplot(ewr[,i] ~ as.factor(ewr$inorout), main=airnames[i])
par(mfrow=c(1,1))               # return graphics as is (or close window)
X=runif(100);boxplot(X,horizontal=T,bty=n)  # short-tailed, symmetric
X=rnorm(100);boxplot(X,horizontal=T,bty=n)  # regular-tailed, symmetric
X=rt(100,2);boxplot(X,horizontal=T,bty=n)   # long-tailed, symmetric
X=sample(1:6,100,p=7-(1:6),replace=T);boxplot(X,horizontal=T,bty=n)
X=sample(1:6,1000,p=7-(1:6),replace=T);boxplot(X,horizontal=T,bty=n)
X=abs(rnorm(200));boxplot(X,horizontal=T,bty=n)
X=rexp(200);boxplot(X,horizontal=T,bty=n)
attach(babies)  #?babies
simple.eda(wt)
simple.eda(gestation)
simple.eda(log10(gestation))    # still fat-tailed and not normal, but symmetric
simple.eda(gestation)
simple.eda(sqrt(gestation))
simple.eda(log10(gestation))
simple.eda(log10(gestation/(1-gestation)))
simple.eda(gestation)
gestation
simple.eda(gestation(gestation<500))
gestation
gestation<500
simple.eda(gestation[gestation<500])
simple.eda(log(gestation[gestation<500]))
simple.eda(sqrt(gestation[gestation<500]))
simple.eda(gestation[gestation<500])
simple.eda(sqrt(gestation[gestation<500]))
simple.eda((gestation[gestation<500]))
simple.eda(gestation)
simple.eda((gestation[gestation<500]))
?qqplot
qqplot(y, rt(300, df = 5))
simple.eda(age)
qqplot(age, rchisq(1000, mean(age)))
qqline(age, distribution = function(p) qchisq(p, mean(age)))
qqplot(age, rchisq(1000, mean(age)))
simple.eda(age)
qqplot(age, rchisq(1000, mean(age)))
qqline(age, distribution = function(p) qchisq(p, mean(age)))
par(mfrow=c(1,1))
qqplot(age, rchisq(1000, mean(age)))
qqline(age, distribution = function(p) qchisq(p, mean(age)))
simple.eda(log10(age))  # looks more symmetric, more like normal
simple.eda(ht)
simple.eda(wt1)
simple.eda(log10(wt1))
plot(density(wt1))
simple.eda(log10(wt1))
simple.eda(wt1)
simple.eda(log10(wt1))
plot(density(wt1))
qqplot(age, rchisq(1000, mean(age)))
qqline(age, distribution = function(p) qchisq(p, mean(age)))
simple.eda(age)
age
simple.eda(age[age<80])
qqplot(age, rchisq(1000, mean(age[age<80])))
simple.eda(age[age<80])
age
qqplot(age[age<80], rchisq(1000, mean(age[age<80])))
qqline(age[age<80], distribution = function(p) qchisq(p, mean(age[age<80])))
simple.eda(age[age<80])
simple.eda(log10(age))  # looks more symmetric, more like normal
simple.eda(log10(age[age<80]))  # looks more symmetric, more like normal
simple.eda(ht)
simple.eda(wt1)
simple.eda(log10(wt1))
plot(density(wt1))
simple.eda(iq)      # normal distribution
median(iq); mean(iq)
simple.eda(slc)
simple.eda(rt(100, df=2))
simple.eda(rt(100, df=10))
simple.eda(rt(100, df=25))
simple.eda(rchisq(100, df=25))
simple.eda(rchisq(100, df=2))
?rchisq
simple.eda(age[age<80])
qqplot(age[age<80], rchisq(1000, mean(age[age<80])))
qqline(age[age<80], distribution = function(p) qchisq(p, mean(age[age<80])))
simple.eda(age[age<80])
simple.eda(log10(age[age<80]))  # looks more symmetric, more like normal
simple.eda(ht)
simple.eda(slc)
simple.eda(trees$Girth)
simple.eda(trees$Height)
simple.eda(trees$Volume)
x = dowdata[['Close']]      # look at daily closes
n = length(x)               # how big is x?
z = log(x[2:n]/x[1:(n-1)])  # This does X_n/X_(n-1)
simple.eda(z)
results=c()
for(i in 1:200) results[i]=length(simple.chutes(sim=TRUE))
hist(results)   # time it takes to finish the game, looks Chi^2
# skewed, fat-tailed on the right
sum(results>100)/200
median(results); mean(results)  # median is lower/fat-tail on the right
plot(simple.chutes(1))  # plots simulated trajectory
qqplot(results, rchisq(1000, mean(results)))
qqline(results, distribution = function(p) qchisq(p, mean(results)))
# not really
plot(density(results))
qqplot(results, rchisq(1000, mean(results)))
qqline(results, distribution = function(p) qchisq(p, mean(results)))
plot(density(results))
qqplot(results, rchisq(1000, mean(results)))
?qqplot
plot(density(results))
qqplot(results, rchisq(1000, mean(results)))
qqline(results, distribution = function(p) qchisq(p, mean(results)))
qqplot(results, rchisq(1000, mean(results)))
plot(density(results))
qqplot(results, rchisq(1000, mean(results)))
qqline(results, distribution = function(p) qchisq(p, mean(results)))
plot(density(results))
results
sum(results>100)/200
for(i in 1:200) results[i]=length(simple.chutes(sim=TRUE))
hist(results)   # time it takes to finish the game, looks Chi^2
sum(results>100)/200
median(results); mean(results)  # median is lower/fat-tail on the right
plot(simple.chutes(1))  # plots simulated trajectory
results
qqplot(results, rchisq(1000, mean(results)))
qqline(results, distribution = function(p) qchisq(p, mean(results)))
plot(density(results))
qqplot(results, rchisq(1000, mean(results)))
results
simple.eda(rchisq(1000, mean(results)))
plot(simple.chutes(1))  # plots simulated trajectory
hist(results)
results
plot(density(results))
prop.test(x = 42, n = 100, p=.5)
prop.test(x=2134,n=4269,p=0.5)
t.test(vacation, mu = 24,alternative = "two.sided")
x = c(15, 10, 13, 7, 9, 8, 21, 9, 14, 8)
# placebo:
y = c(15, 14, 12, 8, 14, 7, 16, 10, 15, 12)
boxplot(x,y)
t.test(x,y, alt="less", var.equal=TRUE)
t.test(x,y, alt="less")
x = c(3, 0, 5, 2, 5, 5, 5, 4, 4, 5)
# Grader 2:
y = c(2, 1, 4, 1, 4, 3, 3, 2, 3, 5)
t.test(x,y)
t.test(x-y)
t.test(x,y, paired = T)
qqnorm(x-y); qqline(x-y)
boxplot(x-y)
hist(x-y)
cor(x,y)
t.test(x, y)
yesbelt = c(12813,647,359,42)
nobelt = c(65963,4000,2642,303)
chisq.test(data.frame(yesbelt,nobelt))
chisq.test(rbind(yesbelt,nobelt))
res<-read.csv("data.csv", header = TRUE, sep = ",", dec = ".", fill = TRUE, blank.lines.skip=TRUE,
comment.char = "", as.is=TRUE, skipNul=TRUE)
res<-read.csv("movies.csv", header = TRUE, sep = ",", dec = ".", fill = TRUE, blank.lines.skip=TRUE,
comment.char = "", as.is=TRUE, skipNul=TRUE)
res<-read.csv("movies.csv")
setwd("C:/Users/PlamenT/Desktop/SEM/Praktikum/RExams/Exam1")
res<-read.csv("movies.csv")
res<-read.csv("movies.csv", header = TRUE, sep = ",", dec = ".", fill = TRUE, blank.lines.skip=TRUE,
comment.char = "", as.is=TRUE, skipNul=TRUE)
res<-read.csv("movie.csv")
res
?read.csv
data.frame(res)
res_df=data.frame(res)
res_df
res_df$color
?data.frame
?sample
samp_no_rep=sample(res_df, size = 3000, replace = FALSE)
length(res_df)
samp_no_rep=sample(c(1:3000), size = 3000, replace = FALSE)
sample(c(1:3000), size = 3000, replace = FALSE)
nrow(res_df)
sample(c(1:nrow(res_df)), size = 3000, replace = FALSE)
res_df_sub1=res_df[samp_no_rep,]
res_df_sub1
samp_no_rep=sample(c(1:nrow(res_df)), size = nrow(res_df), replace = FALSE)
res_df_sub2=res_df[samp_no_rep(1:3000),]
samp_no_rep=sample(c(1:nrow(res_df)), size = nrow(res_df), replace = FALSE)
res_df_sub2=res_df[samp_no_rep(1:3000),]
samp_no_rep=sample(c(1:nrow(res_df)), size = nrow(res_df), replace = FALSE)
res_df_sub2=res_df[samp_no_rep(c(1:3000)),]
samp_no_rep
res_df_sub2=res_df[samp_no_rep[c(1:3000)],]
res_df_sub2
names(res_df)
summary(res_df)
res_df$color
res_df$color=="Black and White"
as.factor("Black and White")
res_df$color==as.factor("Black and White")
res_df$color
res_df$color==" Black and White"
which(res_df$color==" Black and White")[1]
res_df$title_year[which(res_df$color==" Black and White")[1]]
year_index=which(res_df$color==" Black and White")[1]
res_df$title_year[year_index]
res_df$color
which(res_df$color=="Color")
year_index=which(res_df$color=="Color")
res_df$title_year[year_index]
unique(res_df$title_year[year_index])
?unique
sort(unique(res_df$title_year[year_index]))
hist(res_df$gross)
res_df$country
res_df$country=="UK" | res_df$country=="France" | res_df$country=="Germany"
res_df_sub=res_df[filter_countries,c("gross", "color")]
c("gross", "color")
res_df[filter_countries, c("gross", "color")]
filter_countries
filter_countries=res_df$country=="UK" | res_df$country=="France" | res_df$country=="Germany"
res_df_sub=res_df[filter_countries, c("gross", "color")]
res_df_sub
res_df_sub=res_df[filter_countries, c("country", "color")]
res_df_sub
table(res_df_sub)
res_df_sub
table(res_df_sub)
res_df_sub
table(res_df_sub$country ~ res_df_sub$color)
table([res_df_sub$country, res_df_sub$color])
table(c(res_df_sub$country, res_df_sub$color))
c(res_df_sub$country, res_df_sub$color)
res_df_sub$country
res_df_sub$color
c(res_df_sub$country, res_df_sub$color)
res_df_sub$country
?table
res_df_sub$country
table(res_df_sub$country, res_df_sub$color)
res_df_sub$country
levels(res_df_sub$country)
levels(res_df_sub$country)=c("UK", "France", "Germany")
south
library("UsingR")
res_df_sub$country
as.matrix(res_df_sub$country)
as.array(res_df_sub$country)
table(as.array(res_df_sub$country))
table(as.matrix(res_df_sub$country))
table(as.matrix(res_df_sub$country), res_df_sub$color)
as.table(res_df_sub$country)
table(as.matrix(res_df_sub$country), res_df_sub$color)
?subset
subset
?subset.data.frame
res_df_sub=subset(res_df, country = c("UK", "France", "Germany"), select = c("country", "color"))
res_df_sub
res_df_sub=subset(res_df, country == c("UK", "France", "Germany"), select = c("country", "color"))
res_df_sub
res_df_sub=subset(res_df, country == c("UK", "France", "Germany"), select = c("country", "color"))
table(res_df_sub)
res_df_sub=subset.data.frame(res_df, country == c("UK", "France", "Germany"), select = c("country", "color"))
table(res_df_sub)
droplevels(res_df_sub)
res_df_sub = droplevels(res_df_sub)
table(res_df_sub)
res_df_sub
table(as.matrix(res_df_sub$country), res_df_sub$color)
barplot(res_df_sub)
res_df_sub
barplot(res_df_sub$country ~ res_df_sub$color)
barplot(table(res_df_sub))
barplot(table(res_df_sub), beside = T)
res_df_sub
barplot(table(res_df_sub[,c(2,1)]), beside = T)
res_df$num_user_for_reviews
boxplot(res_df$num_user_for_reviews ~ res_df$color)
plot(res_df$num_user_for_reviews ~ res_df$color)
plot(res_df$num_user_for_reviews, res_df$color)
violinplot(res_df$num_user_for_reviews ~ res_df$color)
boxplot(res_df$num_user_for_reviews ~ res_df$color)
violinplot(res_df$num_user_for_reviews ~ res_df$color)
boxplot(res_df$num_user_for_reviews ~ res_df$color)
violinplot(res_df$num_user_for_reviews ~ res_df$color)
mean(res_df$num_user_for_reviews ~ res_df$color)
mean(res_df$num_user_for_reviews[res_df$color==, " Black and White"])
mean(res_df$num_user_for_reviews[res_df$color==" Black and White"])
median(res_df$num_user_for_reviews[res_df$color==" Black and White"])
mean(res_df$num_user_for_reviews[res_df$color=="Color"])
median(res_df$num_user_for_reviews[res_df$color=="Color"])
mean(res_df$num_user_for_reviews[res_df$color==" Black and White"])
mean(res_df$num_user_for_reviews[res_df$color=="Color"])
median(res_df$num_user_for_reviews[res_df$color==" Black and White"])
median(res_df$num_user_for_reviews[res_df$color=="Color"])
filter_countries=-c("USA")
filter_countries="USA"
res_df_sub=res_df[-filter_countries, c("num_voted_users", "num_user_for_reviews")]
filter_countries = res_df$country ~="USA"
filter_countries = res_df$country !="USA"
filter_countries
filter_countries = res_df$country!="USA"
res_df_sub=res_df[filter_countries, c("num_voted_users", "num_user_for_reviews")]
plot(res_df_sub)
cor(res_df_sub)
abline(lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users))
?predict
predict(700000, lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users))
predict(lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users), 700000)
predict.lm(lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users), 700000)
res_df_sub$num_voted_users
(lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users), 700000)
lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users)
predict.lm(lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users), 700000)
predict.lm(lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users), as.data.frame(700000))
as.data.frame(700000)
lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users)
predict(lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users), as.data.frame(700000))
lm.result=lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users)
abline(lm.result)
predict(lm.result, data.frame(x= c(700000)))
predict(lm.result, data.frame(x= 700000))
predict(lm.result, data.frame(num_voted_users =700000))
lm.result=lm(res_df_sub$num_user_for_reviews ~ res_df_sub$num_voted_users)
abline(lm.result)
predict(lm.result, data.frame(num_voted_users =700000))
lm.result
data.frame(num_voted_users =700000)
lm.result
predict(lm.result, data.frame(num_voted_users = c(700000, 2)))
lm.result
predict(lm.result, data.frame(res_df_sub$num_voted_users = c(700000, 2)))
lm.result=lm(num_user_for_reviews ~ num_voted_users, data=res_df_sub)
abline(lm.result)
predict(lm.result, data.frame(num_voted_users = c(700000, 2)))
predict(lm.result, data.frame(num_voted_users = 700000))
A=1, B=1, C=1, D=1
A=1; B=1; C=1; D=1
?dpois
ppois(D+3, D+1) - ppois(min(1, D), D+1) + ppois(D+8, D+1) - ppois(D+4, D+1)
pt(-2, D+2)
(A+B+C+D)/50 - pt(-2, D+2, lower.tail = F)
(A+B+C+D)/50
pt(-2, D+2, lower.tail = F)
(A+B+C+D)/50
(A+B+C+D)/50 + pt(-2, D+2, lower.tail = F)
(A+B+C+D)/50 + pt(-2, D+2)
qt(p = (A+B+C+D)/50 + pt(-2, D+2), D+2)
c(92.34; 94:84; 84:63; 76:63; 86:92; 103:41; 95:77; 73:04; 84:22; 86:68; 81:23; 96:64; 77:19; 69:68;
c(92.34, 94.84, 84.63, 76.63, 86.92, 103.41, 95.77, 73.04, 84.22, 86.68, 81.23, 96.64, 77.19, 69.68,
95.39, 91.89, 86.59, 81.48, 88.98, 86.91, 82.65, 84.94, 83.44, 85.28, 72.58)
time_var=c(92.34, 94.84, 84.63, 76.63, 86.92, 103.41, 95.77, 73.04, 84.22, 86.68, 81.23, 96.64, 77.19, 69.68,
95.39, 91.89, 86.59, 81.48, 88.98, 86.91, 82.65, 84.94, 83.44, 85.28, 72.58)
?t.test
mean(time_var)
sigma/sqrt(length(time_var))
sqrt(length(time_var))
sigma/sqrt(length(time_var))
mean(time_var)
mean(time_var) + sigma/sqrt(length(time_var))
mean(time_var) + qnorm((89+D/100))*sigma/sqrt(length(time_var))
D
qnorm((89+D/100))
89+D/100
mean(time_var) + qnorm(0.89+D/100)*sigma/sqrt(length(time_var))
qnorm(0.89+D/100, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
0.89+D/100
qnorm((1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
(0.89+D/100)/2
1-(1-(0.89+D/100))/2
(1-(0.89+D/100))/2
qnorm(1-(1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
qnorm((1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
qnorm(1-(1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
mean(time_var) + (1-(0.89+D/100))/2*sigma/sqrt(length(time_var))
mean(time_var) + (1-(1-(0.89+D/100))/2)*sigma/sqrt(length(time_var))
qnorm((1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
qnorm(1-(1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
mean(time_var) - (1-(1-(0.89+D/100))/2)*sigma/sqrt(length(time_var))
qnorm((1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
qnorm(1-(1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
mean(time_var) + (1-(0.89+D/100))/2*sigma/sqrt(length(time_var))
qnorm((1-(0.89+D/100)/2), mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
mean(time_var) + (1-(0.89+D/100)/2)*sigma/sqrt(length(time_var))
(1-(0.89+D/100)/2)
0.89+D/100
(1-(0.89+D/100)/2)
(0.89+D/100)/2
(1-(0.89+D/100))/2)
qnorm((1-(0.89+D/100))/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
(1-(0.89+D/100))/2
1-(1-(0.89+D/100))/2
(0.89+D/100)
qnorm((1-alpha)/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
qnorm(1-(1-alpha)/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
alpha=0.89+D/100
qnorm((1-alpha)/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
qnorm(1-(1-alpha)/2, mean = mean(time_var), sd = sigma/sqrt(length(time_var)))
alpha
c(124, 42, 25, 45, 412, 51, 1112, 46, 103, 876, 146, 340, 396)
cancer_data=c(124, 42, 25, 45, 412, 51, 1112, 46, 103, 876, 146, 340, 396)
?wilcox.test
wilcox.test(cancer_data, mu = 100, alternative = "greater", conf.level = 0.01 + D/100)
c(7.83+A, 3.9+B, 13.89+C, 13.12+D, 10.34, 16.85, 12.62, 10.52, 7.21, 6.76, 8.19, 16.19, 11.92, 8.1, 8.01)
samp1=c(7.83+A, 3.9+B, 13.89+C, 13.12+D, 10.34, 16.85, 12.62, 10.52, 7.21, 6.76, 8.19, 16.19, 11.92, 8.1, 8.01)
samp2=c(9.66 + A, 9.38 + B, 10.35 + C, 11.05 + D, 11.28, 11.32, 10.16, 8.78, 9.58, 9.63, 9.76, 10.57)
samp1=c(7.83+A, 3.9+B, 13.89+C, 13.12+D, 10.34, 16.85, 12.62, 10.52, 7.21, 6.76, 8.19, 16.19, 11.92, 8.1, 8.01)
samp2=c(9.66 + A, 9.38 + B, 10.35 + C, 11.05 + D, 11.28, 11.32, 10.16, 8.78, 9.58, 9.63, 9.76, 10.57)
t.test(samp1, samp2, var.equal = FALSE, conf.level = 0.01 + D/100, alternative = "greater")
curve(dnorm(c(0:0.1:10)))
curve(dnorm,from = 0,to = 10, n = 11)
samp_heights=rnorm(500, 172, 20)
A=sample(samp_heights, 100, replace = TRUE)
A[1:5]
summary(A)
hist(A)
sum(A<8)
pnorm(172, mean = 172,sd = 20)
pnorm(182, mean = 172, sd = 20, lower.tail = FALSE)
pnorm(182, mean = 172, sd = 20)-pnorm(172, mean = 172,sd = 20)
qnorm(0.28 + pnorm(172, mean = 172, sd = 20), mean = 172, sd = 20)
prop.test(5, 25, p = 0.21, alternative = "less")
samp_men=c(43, 54, 89, 89, 64, 45, 92, 96, 100, 98, 82, 73, 78, 33, 58, 88, 86)
samp_women=c(55, 65, 55, 58, 69, 74, 34, 98, 78, 99, 99, 76, 69, 79, 56, 67, 78, 88, 91, 84, 87, 91)
t.test(samp_men, samp_women, var.equal = T)
data_corns=read.csv("Corns.csv")
setwd("C:/Users/PlamenT/Desktop/SEM/Praktikum/RExams/FinalTestR")
data_corns=read.csv("Corns.csv")
data_corns
head(data_corns)
data_corns[1:5,]
summary(data_corns)
table(data_corns$Corns)
data_corns$L
table(data_corns$L)
table(data_corns$W)
table(data_corns$Price)
table(data_corns$Corns)
table(data_corns$state)
prop.table(table(data_corns$Corns))
prop.table(table(data_corns$state))
table(data_corns$Corns, data_corns$state)
barplot(data_corns$Corns, data_corns$state, beside = T)
data_corns$Corns
barplot(table(data_corns$Corns, data_corns$state), beside = T)
barplot(table(data_corns$state, data_corns$Corns), beside = T)
barplot(table(data_corns$Corns, data_corns$state), beside = T)
data_corns$Corns
boxplot(data_corns$Price ~ data_corns$Corns)
hist(data_corns$Price ~ data_corns$Corns)
hist(data_corns$Price[data_corns$Corns=="Hazelnuts"])
plot(data_corns$Price, data_corns$L)
data_corns$roasted
data_corns$state
plot(data_corns$Price[data_corns$state=="Roasted"], data_corns$L[data_corns$state=="Roasted"])
plot(data_corns$Price[data_corns$Corns=="Hazelnuts"], data_corns$L[data_corns$state=="Hazelnuts"])
plot(data_corns$Price[data_corns$Corns=="Hazelnuts"], data_corns$L[data_corns$Corns=="Hazelnuts"])
data_corns$L[data_corns$Corns=="Sunflower"]
mu=mean(data_corns$L[data_corns$Corns=="Sunflower"])
sigma=sd(data_corns$L[data_corns$Corns=="Sunflower"])
c(mu-qnorm(0.92)*sigma, mu+qnorm(0.92)*sigma)
chisq.test(data_corns$Price, p = dnorm(data_corns$Price, mu, sigma))
dnorm(data_corns$Price, mu, sigma)
data_corns$Price
chisq.test(data_corns$Price, p = dnorm(data_corns$Price, mu, sigma))
chisq.test(data_corns$Price, p = dnorm(data_corns$Price, mu, sigma), rescale.p = T)
chisq.test(data_corns$Price, p = dnorm(data_corns$Price, mean(data_corns$Price), sd(data_corns$Price)), rescale.p = T)
simple.eda(data_corns$Price)
qnorm(0.9 + pnorma(1,3,1), 3, 1)
qnorm(0.9 + pnorm(1,3,1), 3, 1)
